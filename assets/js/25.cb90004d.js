(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{799:function(e,n,a){"use strict";a.r(n);var r=a(14),_=Object(r.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[e._v("今天在看 "),a("code",[e._v("ts-loader")]),e._v(" 的功能特性时看到其支持 "),a("a",{attrs:{href:"https://github.com/TypeStrong/ts-loader#yarn-plugnplay",target:"_blank",rel:"noopener noreferrer"}},[e._v("Yarn Plug'n'Play"),a("OutboundLink")],1),e._v("。 于是花了一些时间了解了一下它的工作原理以及解决的问题并整理出了本篇文章。")]),e._v(" "),a("h2",{attrs:{id:"现状与痛点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#现状与痛点"}},[e._v("#")]),e._v(" 现状与痛点")]),e._v(" "),a("p",[e._v("Yarn 团队开发 PnP 特性最直接的原因就是现有的依赖管理方式效率太低。引用依赖时慢，安装依赖时也慢。")]),e._v(" "),a("p",[e._v("先说说 Node 在处理依赖引用时的逻辑，这个流程会有如下两种情况：")]),e._v(" "),a("ul",[a("li",[e._v("如果我们传给 require() 调用的参数是一个核心模块（例如 “fs”、”path”等）或者是一个本地相对路径（例如 "),a("code",[e._v("./module-a.js")]),e._v(" 或 "),a("code",[e._v("/my-li/module-b.js")]),e._v("），那么 Node 会直接使用对应的文件。")]),e._v(" "),a("li",[e._v("如果不是前面描述的情况，那么 Node 会开始寻找一个名为 node_modules 的目录：\n首先 Node 会在当前目录寻找 node_modules，如果没有则到父目录查找，以此类推直到系统根目录。\n找到 node_modules 目录之后，再在该目录中寻找名为 moduleName.js 的文件或是名为 moduleName 的子目录。\n此处旨在说明问题，对 Node 内部模块解析逻辑做了简化描述")])]),e._v(" "),a("p",[e._v("可见 Node 在解析依赖时需要进行大量的文件 I/O 操作，效率并不高。")]),e._v(" "),a("p",[e._v("再来看看安装依赖时发生了什么，现阶段 yarn install 操作会执行以下 4 个步骤：")]),e._v(" "),a("ol",[a("li",[e._v("将依赖包的版本区间解析为某个具体的版本号")]),e._v(" "),a("li",[e._v("下载对应版本依赖的 tar 包到本地离线镜像")]),e._v(" "),a("li",[e._v("将依赖从离线镜像解压到本地缓存")]),e._v(" "),a("li",[e._v("将依赖从缓存拷贝到当前目录的 node_modules 目录")])]),e._v(" "),a("p",[e._v("其中第 4 步同样涉及大量的文件 I/O，导致安装依赖时效率不高（尤其是在 CI 环境，每次都需要安装全部依赖）。")]),e._v(" "),a("p",[e._v("Facebook 的工程师受够了这些问题决定寻找一个能彻底解决问题同时还可以与现有生态兼容的解决方案。这便是 Plug’n’Play 特性，简称 PnP。它已在 Facebook 内部测试了一段时间，现在 Yarn 团队决定与社区分享并共同优化该方案。")]),e._v(" "),a("h2",{attrs:{id:"实现方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现方案"}},[e._v("#")]),e._v(" 实现方案")]),e._v(" "),a("p",[e._v("PnP 的具体工作原理是，作为把依赖从缓存拷贝到 node_modules 的替代方案，Yarn 会维护一张静态映射表，该表中包含了以下信息：")]),e._v(" "),a("p",[e._v("当前依赖树中包含了哪些依赖包的哪些版本\n这些依赖包是如何互相关联的\n这些依赖包在文件系统中的具体位置\n这个映射表在 Yarn 的 PnP 实现中对应项目目录中的 .pnp.js 文件。")]),e._v(" "),a("p",[e._v("这个 .pnp.js 文件是如何生成，Yarn 又是如何利用它的呢？")]),e._v(" "),a("p",[e._v("在安装依赖时，在第 3 步完成之后，Yarn 并不会拷贝依赖到 node_modules 目录，而是会在 .pnp.js 中记录下该依赖在缓存中的具体位置。这样就避免了大量的 I/O 操作同时项目目录也不会有 node_modules 目录生成。")]),e._v(" "),a("p",[e._v("同时 .pnp.js 还包含了一个特殊的 resolver，Yarn 会利用这个特殊的 resolver 来处理 require() 请求，该 resolver 会根据 .pnp.js 文件中包含的静态映射表直接确定依赖在文件系统中的具体位置，从而避免了现有实现在处理依赖引用时的 I/O 操作。")]),e._v(" "),a("h2",{attrs:{id:"带来了哪些好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#带来了哪些好处"}},[e._v("#")]),e._v(" 带来了哪些好处")]),e._v(" "),a("p",[e._v("从 PnP 的实现方案可以看出，同一个系统上不同项目引用的相同依赖的相同版本实际都是指向的缓存中的同一个目录。这带来了几个最直观的好处：")]),e._v(" "),a("p",[e._v("安装依赖的速度得到了空前的提升\nCI 环境中多个 CI 实例可以共享同一份缓存\n同一个系统中的多个项目不再需要占用多份磁盘空间")]),e._v(" "),a("p",[e._v("如何开始使用 Plug’n’Play 特性？\n首先你需要 Yarn 1.12+ 版本。然后根据你的具体场景可以选择：")]),e._v(" "),a("p",[e._v("使用 "),a("code",[e._v("create-react-app")]),e._v(" 创建项目时开启 PnP\n"),a("code",[e._v("create-react-app")]),e._v(" 已经集成了对 PnP 的支持。只需在创建项目时添加 "),a("code",[e._v("--use-pnp")]),e._v(" 参数即可。")]),e._v(" "),a("p",[a("code",[e._v("npx create-react-app testapp --use-pnp")]),e._v("\n在已有项目中开启 PnP\n只需在项目中执行:")]),e._v(" "),a("p",[a("code",[e._v("yarn --pnp")]),e._v("\n即可开启 PnP 特性。")]),e._v(" "),a("h2",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[e._v("#")]),e._v(" 注意事项")]),e._v(" "),a("p",[e._v("pkg.installConfig 字段\n在项目中开启 PnP 特性后，Yarn 会在 package.json 文件中创建一个 "),a("code",[e._v("installConfig")]),e._v(" 字段：")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"installConfig"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"pnp"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("只要 installConfig.pnp 的值是一个真值且当前版本的 Yarn 支持，PnP 特性就会被启用。")]),e._v(" "),a("p",[e._v("执行 "),a("code",[e._v("npm script")]),e._v(" 或是运行 .js 文件\n由于在开启了 PnP 的项目中不再有 node_modules 目录，所有的依赖引用都必须由 .pnp.js 中的 resolver 处理。因此不论是执行 script 还是用 node 直接执行一个 JS 文件，都必须经由 Yarn 处理。必须通过 "),a("code",[e._v("yarn run")]),e._v(" 或是 "),a("code",[e._v("yarn node")]),e._v(" 执行。")]),e._v(" "),a("h2",{attrs:{id:"在项目中调试依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在项目中调试依赖"}},[e._v("#")]),e._v(" 在项目中调试依赖")]),e._v(" "),a("p",[e._v("在开发过程中我们有时会直接修改 node_modules 目录下的依赖来调试。但在 PnP 模式下，由于依赖都指向了全局缓存，我们不再可以直接修改这些依赖。")]),e._v(" "),a("p",[e._v("针对这种场景，Yarn 提供了 "),a("code",[e._v("yarn unplug packageName")]),e._v(" 来将某个指定依赖拷贝到项目中的 "),a("code",[e._v(".pnp/unplugged")]),e._v(" 目录下。之后 .pnp.js 中的 resolver 就会自动加载这个 unplug 的版本。")]),e._v(" "),a("p",[e._v("调试完毕后，再执行 "),a("code",[e._v("yarn unplug --clear packageName")]),e._v(" 可移除本地 "),a("code",[e._v(".pnp/unplugged")]),e._v("中的对应依赖。")]),e._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("目前我还并没有看到 PnP 这个一功能被广泛应用，大家可以尝试在本地开发环境中启用 PnP 来感受一下它带来的全新体验。遇到问题可以及时反馈到 "),a("a",{attrs:{href:"https://github.com/yarnpkg/yarn/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("Yarn 的 issue 列表"),a("OutboundLink")],1),e._v(" 中。")])])}),[],!1,null,null,null);n.default=_.exports}}]);