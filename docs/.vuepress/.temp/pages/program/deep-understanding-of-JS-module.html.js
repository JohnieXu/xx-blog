export const data = JSON.parse("{\"key\":\"v-3e4a50f9\",\"path\":\"/program/deep-understanding-of-JS-module.html\",\"title\":\"深入理解JS模块\",\"lang\":\"en-US\",\"frontmatter\":{\"title\":\"深入理解JS模块\",\"created\":\"2018/04/14\",\"updated\":\"2019/10/10\",\"tag\":[\"前端进阶\"],\"description\":\"引言 JavaScript的模块机制其实是借鉴的其他程序设计语言的, 如Java中package的概念, import java.util.ArrayList;; package就是逻辑上相关的代码组织到同一个包内，包内是一个相对独立的作用域，不用担心命名冲突等等, 当需要在外部使用的时候直接import相应的package即可。 由于JavaScript在设计之初的定位原因, 并没有提供类似模块的功能, 随后便出现了各种模拟类似功能的规范。到今天(2018-5-28)ES6已经十分普及, ES6的模块机制已经大规模使用, 我们完全可以使用ES6提供的模块化规范(机制)。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://johniexu.github.io/xx-blog/program/deep-understanding-of-JS-module.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"迪诺笔记\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"深入理解JS模块\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"引言 JavaScript的模块机制其实是借鉴的其他程序设计语言的, 如Java中package的概念, import java.util.ArrayList;; package就是逻辑上相关的代码组织到同一个包内，包内是一个相对独立的作用域，不用担心命名冲突等等, 当需要在外部使用的时候直接import相应的package即可。 由于JavaScript在设计之初的定位原因, 并没有提供类似模块的功能, 随后便出现了各种模拟类似功能的规范。到今天(2018-5-28)ES6已经十分普及, ES6的模块机制已经大规模使用, 我们完全可以使用ES6提供的模块化规范(机制)。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"en-US\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2020-04-08T14:52:51.000Z\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"前端进阶\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2020-04-08T14:52:51.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"深入理解JS模块\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2020-04-08T14:52:51.000Z\\\",\\\"author\\\":[]}\"]]},\"headers\":[{\"level\":2,\"title\":\"引言\",\"slug\":\"引言\",\"link\":\"#引言\",\"children\":[]},{\"level\":2,\"title\":\"类模块化\",\"slug\":\"类模块化\",\"link\":\"#类模块化\",\"children\":[{\"level\":3,\"title\":\"函数封装\",\"slug\":\"函数封装\",\"link\":\"#函数封装\",\"children\":[]},{\"level\":3,\"title\":\"对象\",\"slug\":\"对象\",\"link\":\"#对象\",\"children\":[]},{\"level\":3,\"title\":\"立即执行函数\",\"slug\":\"立即执行函数\",\"link\":\"#立即执行函数\",\"children\":[]}]},{\"level\":2,\"title\":\"CommonJS(NodeJS)\",\"slug\":\"commonjs-nodejs\",\"link\":\"#commonjs-nodejs\",\"children\":[{\"level\":3,\"title\":\"CommonJS模块存在的问题\",\"slug\":\"commonjs模块存在的问题\",\"link\":\"#commonjs模块存在的问题\",\"children\":[]}]},{\"level\":2,\"title\":\"AMD(RequireJS)\",\"slug\":\"amd-requirejs\",\"link\":\"#amd-requirejs\",\"children\":[{\"level\":3,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]},{\"level\":3,\"title\":\"AMD与CMD的区别\",\"slug\":\"amd与cmd的区别\",\"link\":\"#amd与cmd的区别\",\"children\":[]}]},{\"level\":2,\"title\":\"CMD(SeaJS)\",\"slug\":\"cmd-seajs\",\"link\":\"#cmd-seajs\",\"children\":[]},{\"level\":2,\"title\":\"UMD\",\"slug\":\"umd\",\"link\":\"#umd\",\"children\":[]},{\"level\":2,\"title\":\"ES6模块(import,export)\",\"slug\":\"es6模块-import-export\",\"link\":\"#es6模块-import-export\",\"children\":[{\"level\":3,\"title\":\"注意\",\"slug\":\"注意\",\"link\":\"#注意\",\"children\":[]}]},{\"level\":2,\"title\":\"参考文章\",\"slug\":\"参考文章\",\"link\":\"#参考文章\",\"children\":[]}],\"git\":{\"createdTime\":1586357571000,\"updatedTime\":1586357571000,\"contributors\":[{\"name\":\"JohnieXu\",\"email\":\"281910378@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":7.29,\"words\":2187},\"filePathRelative\":\"program/deep-understanding-of-JS-module.md\",\"localizedDate\":\"April 8, 2020\",\"excerpt\":\"<h2> 引言</h2>\\n<p><code>JavaScript</code>的模块机制其实是借鉴的其他程序设计语言的, 如Java中package的概念, <code>import java.util.ArrayList;</code>; package就是逻辑上相关的代码组织到同一个包内，包内是一个相对独立的作用域，不用担心命名冲突等等, 当需要在外部使用的时候直接import相应的package即可。</p>\\n<p>由于<code>JavaScript</code>在设计之初的定位原因, 并没有提供类似模块的功能, 随后便出现了各种<strong>模拟</strong>类似功能的规范。到今天(2018-5-28)ES6已经十分普及, ES6的模块机制已经大规模使用, 我们完全可以使用ES6提供的模块化规范(机制)。</p>\",\"autoDesc\":true}")
