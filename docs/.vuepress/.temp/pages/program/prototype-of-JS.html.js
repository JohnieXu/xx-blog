export const data = JSON.parse("{\"key\":\"v-4591f22e\",\"path\":\"/program/prototype-of-JS.html\",\"title\":\"JS原型链\",\"lang\":\"en-US\",\"frontmatter\":{\"title\":\"JS原型链\",\"created\":\"2019/11/06\",\"updated\":\"2019/11/06\",\"category\":[\"硬核前端\"],\"tag\":[\"前端核心\",\"前端进阶\"],\"description\":\"前言 思考以下几个问题： 原型链是什么概念， JS 中为何要引入原型链？ 原型链是怎样实现继承的？ 构造函数 constructor，proto，ES6 中 class、static、super 和原型链的关系？ 如何利用原型链来解释 this 的指向问题？ 原型链与区块链？ 看下面这段代码的打印结果 function Foo() { return this; } Foo.getName = function() { console.log(\\\"1\\\"); }; Foo.prototype.getName = function() { console.log(\\\"2\\\"); }; new Foo.getName(); // -&gt; 1 等价于new (Foo.getName()) 调用的是构造函数Foo本身的getName方法 new Foo().getName(); // -&gt; 2 等价于(new Foo()).getName() 调用的是实例上(原型上)的getName方法\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://johniexu.github.io/xx-blog/program/prototype-of-JS.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"迪诺笔记\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"JS原型链\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"前言 思考以下几个问题： 原型链是什么概念， JS 中为何要引入原型链？ 原型链是怎样实现继承的？ 构造函数 constructor，proto，ES6 中 class、static、super 和原型链的关系？ 如何利用原型链来解释 this 的指向问题？ 原型链与区块链？ 看下面这段代码的打印结果 function Foo() { return this; } Foo.getName = function() { console.log(\\\"1\\\"); }; Foo.prototype.getName = function() { console.log(\\\"2\\\"); }; new Foo.getName(); // -&gt; 1 等价于new (Foo.getName()) 调用的是构造函数Foo本身的getName方法 new Foo().getName(); // -&gt; 2 等价于(new Foo()).getName() 调用的是实例上(原型上)的getName方法\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"en-US\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"前端核心\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"前端进阶\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"JS原型链\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[]}\"]]},\"headers\":[{\"level\":2,\"title\":\"前言\",\"slug\":\"前言\",\"link\":\"#前言\",\"children\":[]},{\"level\":2,\"title\":\"理解原型链的链\",\"slug\":\"理解原型链的链\",\"link\":\"#理解原型链的链\",\"children\":[{\"level\":3,\"title\":\"对象的三种创建方式\",\"slug\":\"对象的三种创建方式\",\"link\":\"#对象的三种创建方式\",\"children\":[]},{\"level\":3,\"title\":\"构造函数/原型/实例对象\",\"slug\":\"构造函数-原型-实例对象\",\"link\":\"#构造函数-原型-实例对象\",\"children\":[]},{\"level\":3,\"title\":\"instanceof\",\"slug\":\"instanceof\",\"link\":\"#instanceof\",\"children\":[]},{\"level\":3,\"title\":\"this 的指向问题\",\"slug\":\"this-的指向问题\",\"link\":\"#this-的指向问题\",\"children\":[]}]}],\"readingTime\":{\"minutes\":2.38,\"words\":714},\"filePathRelative\":\"program/prototype-of-JS.md\",\"excerpt\":\"<h2> 前言</h2>\\n<p>思考以下几个问题：</p>\\n<ol>\\n<li>原型链是什么概念， JS 中为何要引入原型链？</li>\\n<li>原型链是怎样实现继承的？</li>\\n<li>构造函数 constructor，<strong>proto</strong>，ES6 中 class、static、super 和原型链的关系？</li>\\n<li>如何利用原型链来解释 this 的指向问题？</li>\\n<li>原型链与区块链？</li>\\n</ol>\\n<p>看下面这段代码的打印结果</p>\\n<div class=\\\"language-javascript line-numbers-mode\\\" data-ext=\\\"js\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nFoo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"1\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">Foo</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"2\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Foo<span class=\\\"token punctuation\\\">.</span>getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -&gt; 1   等价于new (Foo.getName()) 调用的是构造函数Foo本身的getName方法</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Foo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// -&gt; 2   等价于(new Foo()).getName() 调用的是实例上(原型上)的getName方法</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
